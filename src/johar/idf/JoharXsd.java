/** johar.xsd file, as a Java class.
  * Generated by "makeJoharXsdJava.tcsh" from master source file
  * "../../../resources/johar.xsd".
  * "makeJoharXsdJava.tcsh" should be re-run every time johar.xsd changes.
  */ 

package johar.idf;

import java.io.ByteArrayInputStream;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;

class JoharXsd {
    public static String joharXsdString() {
	StringBuffer sb = new StringBuffer();

/*******************************************/
sb.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n");
sb.append("<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n");
sb.append("\n");
sb.append("    <!--\n");
sb.append("	Design:\n");
sb.append("	1.  Every sub-attribute can be given in any order, so every\n");
sb.append("	    sub-attribute is declared as an \"xs:choice\".\n");
sb.append("	2.  Each \"xs:choice\" is given an unbounded number of occurrences.\n");
sb.append("	3.  The Java code checks to make sure that there are enough and\n");
sb.append("	    not too many of each sub-attribute.\n");
sb.append("	This design seems to be needed in order to avoid either a long\n");
sb.append("	XSD file or imposing an order on the sub-attributes.\n");
sb.append("    -->\n");
sb.append("\n");
sb.append("    <!-- The overall format of a Johar Interface Declaration File (IDF) -->\n");
sb.append("    <xs:element name=\"Johar\">\n");
sb.append("	<xs:complexType>\n");
sb.append("	    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("		<xs:element name=\"Application\" type=\"upperIdentifier\"/>\n");
sb.append("		<xs:element name=\"ApplicationEngine\" type=\"xs:string\"/>\n");
sb.append("		<xs:element name=\"Command\" type=\"CommandType\"/>\n");
sb.append("		<xs:element ref=\"CommandGroup\"/>\n");
sb.append("		<xs:element name=\"IdfVersion\" type=\"xs:string\"/>\n");
sb.append("		<xs:element name=\"InitializationMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("		<xs:element ref=\"Table\"/>\n");
sb.append("\n");
sb.append("    	    </xs:choice>\n");
sb.append("	</xs:complexType>\n");
sb.append("    </xs:element>\n");
sb.append("\n");
sb.append("\n");
sb.append("    <!-- ========== BEGIN declarations relevant to Commands ========== -->\n");
sb.append("\n");
sb.append("    <!-- What can go inside a Command declaration -->\n");
sb.append("    <xs:complexType name=\"CommandType\">\n");
sb.append("	<xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("	    <xs:element name=\"ActiveIfMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("	    <xs:element ref=\"BriefHelp\"/>\n");
sb.append("	    <xs:element name=\"CommandMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("	    <xs:element name=\"Label\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element name=\"MultiLineHelp\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element ref=\"OneLineHelp\"/>\n");
sb.append("	    <xs:element name=\"Prominence\" type=\"nonNegativeInt\"/>\n");
sb.append("	    <xs:element name=\"Question\" type=\"questionType\"/>\n");
sb.append("	    <xs:element name=\"QuitAfter\" type=\"joharBoolean\"/>\n");
sb.append("	    <xs:element name=\"QuitAfterIfMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("	    <!-- A Command can either have stages, or Parameters and\n");
sb.append("		 ParameterCheckMethods, but not both. -->\n");
sb.append("	    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("		<xs:group ref=\"CommandContentsNoStages\"/>\n");
sb.append("		<xs:group ref=\"CommandStages\"/>\n");
sb.append("	    </xs:choice>\n");
sb.append("\n");
sb.append("	</xs:choice>\n");
sb.append("    	<xs:attribute name=\"name\" type=\"xs:string\"/>\n");
sb.append("    </xs:complexType>\n");
sb.append("\n");
sb.append("    <!-- Things that can go inside a Command declaration if there\n");
sb.append("	are no Stages -->\n");
sb.append("    <xs:group name=\"CommandContentsNoStages\">\n");
sb.append("	<xs:choice>\n");
sb.append("\n");
sb.append("	    <xs:element name=\"Parameter\" type=\"paramType\"/>\n");
sb.append("	    <xs:element name=\"ParameterCheckMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("	</xs:choice>\n");
sb.append("    </xs:group>\n");
sb.append("\n");
sb.append("    <!-- One sequence of Stages -->\n");
sb.append("    <xs:group name=\"CommandStages\">\n");
sb.append("	<xs:choice>\n");
sb.append("\n");
sb.append("	    <xs:element name=\"Stage\" type=\"StageContents\"/>\n");
sb.append("\n");
sb.append("	</xs:choice>\n");
sb.append("    </xs:group>\n");
sb.append("\n");
sb.append("    <!-- What can go inside a Stage declaration -->\n");
sb.append("    <xs:complexType name=\"StageContents\">\n");
sb.append("	<xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("	    <xs:element name=\"Parameter\" type=\"paramType\"/>\n");
sb.append("	    <xs:element name=\"ParameterCheckMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("	</xs:choice>\n");
sb.append("    </xs:complexType>\n");
sb.append("\n");
sb.append("    <!-- ========== END declarations relevant to Commands ========== -->\n");
sb.append("\n");
sb.append("\n");
sb.append("    <!-- BEGIN declarations relevant to Parameters and Questions -->\n");
sb.append("\n");
sb.append("    <!-- What can go inside either a Parameter or Question declaration -->\n");
sb.append("    <xs:complexType name=\"paramOrQuestionType\">\n");
sb.append("\n");
sb.append("	<xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("	    <xs:element ref=\"BriefHelp\"/>\n");
sb.append("	    <xs:element name=\"Choices\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element name=\"DefaultValue\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element name=\"DefaultValueMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("	    <xs:element name=\"FileConstraint\">\n");
sb.append("		<xs:simpleType>\n");
sb.append("		    <xs:restriction base=\"xs:string\">\n");
sb.append("    			<xs:enumeration value=\"mustBeReadable\"/>\n");
sb.append("			<xs:enumeration value=\"mustNotExistYet\"/>\n");
sb.append("			<xs:enumeration value=\"none\"/>\n");
sb.append("		    </xs:restriction>\n");
sb.append("		</xs:simpleType>\n");
sb.append("	    </xs:element>\n");
sb.append("\n");
sb.append("	    <xs:element name=\"Label\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element name=\"MaxNumberOfChars\" type=\"positiveInt\"/>\n");
sb.append("	    <xs:element name=\"MaxNumberOfLines\" type=\"positiveInt\"/>\n");
sb.append("	    <xs:element name=\"MaxValue\" type=\"xs:decimal\"/>\n");
sb.append("	    <xs:element name=\"MinNumberOfChars\" type=\"nonNegativeInt\"/>\n");
sb.append("	    <xs:element name=\"MinValue\" type=\"xs:decimal\"/>\n");
sb.append("	    <xs:element name=\"MultiLineHelp\" type=\"xs:string\"/>\n");
sb.append("	    <xs:element ref=\"OneLineHelp\"/>\n");
sb.append("	    <xs:element name=\"Prominence\" type=\"nonNegativeInt\"/>\n");
sb.append("	    <xs:element name=\"SourceTable\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("	    <xs:element name=\"Type\">\n");
sb.append("		<xs:simpleType>\n");
sb.append("		    <xs:restriction base=\"xs:string\">\n");
sb.append("			<xs:enumeration value=\"boolean\"/>\n");
sb.append("			<xs:enumeration value=\"choice\"/>\n");
sb.append("			<xs:enumeration value=\"date\"/>\n");
sb.append("			<xs:enumeration value=\"file\"/>\n");
sb.append("			<xs:enumeration value=\"float\"/>\n");
sb.append("			<xs:enumeration value=\"int\"/>\n");
sb.append("			<xs:enumeration value=\"text\"/>\n");
sb.append("			<xs:enumeration value=\"tableEntry\"/>\n");
sb.append("			<xs:enumeration value=\"timeOfDay\"/>\n");
sb.append("		    </xs:restriction>\n");
sb.append("		</xs:simpleType>\n");
sb.append("	    </xs:element>\n");
sb.append("\n");
sb.append("	</xs:choice>\n");
sb.append("\n");
sb.append("	<xs:attribute name=\"name\" type=\"xs:string\"/>\n");
sb.append("    </xs:complexType>\n");
sb.append("\n");
sb.append("    <!-- What else can go inside a Parameter declaration -->\n");
sb.append("    <xs:complexType name=\"paramType\">\n");
sb.append("	<xs:complexContent>\n");
sb.append("	    <xs:extension base=\"paramOrQuestionType\">\n");
sb.append("		<xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("		    <xs:element name=\"MaxNumberOfReps\" type=\"positiveInt\"/>\n");
sb.append("		    <xs:element name=\"MinNumberOfReps\" type=\"nonNegativeInt\"/>\n");
sb.append("		    <xs:element name=\"ParentParameter\" type=\"lowerIdentifier\"/>\n");
sb.append("		    <xs:element name=\"ParentValue\"/>\n");
sb.append("\n");
sb.append("		    <xs:element name=\"RepsModel\">\n");
sb.append("			<xs:simpleType>\n");
sb.append("			    <xs:restriction base=\"xs:string\">\n");
sb.append("				<xs:enumeration value=\"set\"/>\n");
sb.append("    				<xs:enumeration value=\"multiset\"/>\n");
sb.append("				<xs:enumeration value=\"sequence\"/>\n");
sb.append("			    </xs:restriction>\n");
sb.append("			</xs:simpleType>\n");
sb.append("		    </xs:element>\n");
sb.append("\n");
sb.append("		</xs:choice>\n");
sb.append("	    </xs:extension>\n");
sb.append("	</xs:complexContent>\n");
sb.append("    </xs:complexType>\n");
sb.append("\n");
sb.append("    <!-- What else can go inside a Question declaration -->\n");
sb.append("    <xs:complexType name=\"questionType\">\n");
sb.append("	<xs:complexContent>\n");
sb.append("	    <xs:extension base=\"paramOrQuestionType\">\n");
sb.append("		<xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("		    <xs:element name=\"AskIfMethod\" type=\"lowerIdentifier\"/>\n");
sb.append("\n");
sb.append("		</xs:choice>\n");
sb.append("	    </xs:extension>\n");
sb.append("	</xs:complexContent>\n");
sb.append("    </xs:complexType>\n");
sb.append("\n");
sb.append("    <!--  END declarations relevant to Parameters and Questions -->\n");
sb.append("\n");
sb.append("\n");
sb.append("    <!-- What can go inside a CommandGroup declaration -->\n");
sb.append("    <xs:element name=\"CommandGroup\">\n");
sb.append("	<xs:complexType>\n");
sb.append("	    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("		<xs:element name=\"Label\" type=\"xs:string\"/>\n");
sb.append("		<xs:element name=\"Member\" type=\"xs:string\"/>\n");
sb.append("\n");
sb.append("	    </xs:choice>\n");
sb.append("	    <xs:attribute name=\"name\" type=\"xs:string\"/>\n");
sb.append("	</xs:complexType>\n");
sb.append("    </xs:element>\n");
sb.append("\n");
sb.append("\n");
sb.append("    <!-- What can go inside a Table declaration -->\n");
sb.append("    <xs:element name=\"Table\">\n");
sb.append("	<xs:complexType>\n");
sb.append("	    <xs:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n");
sb.append("\n");
sb.append("		<xs:element name=\"Browsable\" type=\"joharBoolean\"/>\n");
sb.append("		<xs:element name=\"DefaultHeading\" type=\"xs:string\"/>\n");
sb.append("		<xs:element name=\"Label\" type=\"xs:string\"/>\n");
sb.append("\n");
sb.append("	    </xs:choice>\n");
sb.append("	    <xs:attribute name=\"name\" type=\"xs:string\"/>\n");
sb.append("	</xs:complexType>\n");
sb.append("    </xs:element>\n");
sb.append("\n");
sb.append("\n");
sb.append("    <!-- Declarations common to many of the above -->\n");
sb.append("\n");
sb.append("    <xs:element name=\"BriefHelp\" type=\"xs:string\"/>\n");
sb.append("\n");
sb.append("    <xs:element name=\"OneLineHelp\" type=\"xs:string\"/>\n");
sb.append("\n");
sb.append("    <xs:simpleType name=\"joharBoolean\">\n");
sb.append("	<xs:restriction base=\"xs:normalizedString\">\n");
sb.append("	    <xs:enumeration value=\"yes\"/>\n");
sb.append("    	    <xs:enumeration value=\"no\"/>\n");
sb.append("    	    <xs:enumeration value=\"true\"/>\n");
sb.append("    	    <xs:enumeration value=\"false\"/>\n");
sb.append("	    <xs:enumeration value=\"Yes\"/>\n");
sb.append("    	    <xs:enumeration value=\"No\"/>\n");
sb.append("    	    <xs:enumeration value=\"True\"/>\n");
sb.append("    	    <xs:enumeration value=\"False\"/>\n");
sb.append("	    <xs:enumeration value=\"YES\"/>\n");
sb.append("    	    <xs:enumeration value=\"NO\"/>\n");
sb.append("    	    <xs:enumeration value=\"TRUE\"/>\n");
sb.append("    	    <xs:enumeration value=\"FALSE\"/>\n");
sb.append("      	</xs:restriction>\n");
sb.append("    </xs:simpleType>\n");
sb.append("\n");
sb.append("    <xs:simpleType name=\"positiveInt\">\n");
sb.append("	<xs:restriction base=\"xs:integer\">\n");
sb.append("    	    <xs:minInclusive value=\"1\"/>\n");
sb.append("	</xs:restriction>\n");
sb.append("    </xs:simpleType>\n");
sb.append("\n");
sb.append("    <xs:simpleType name=\"nonNegativeInt\">\n");
sb.append("	<xs:restriction base=\"xs:integer\">\n");
sb.append("    	    <xs:minInclusive value=\"0\"/>\n");
sb.append("	</xs:restriction>\n");
sb.append("    </xs:simpleType>\n");
sb.append("\n");
sb.append("    <xs:simpleType name=\"lowerIdentifier\">\n");
sb.append("  	<xs:restriction base=\"xs:string\">\n");
sb.append("	    <xs:pattern value=\"[\\s]*[a-z]([a-zA-Z0-9])*[\\s]*\"/>\n");
sb.append(" 	</xs:restriction>\n");
sb.append("    </xs:simpleType>\n");
sb.append("\n");
sb.append("    <xs:simpleType name=\"upperIdentifier\">\n");
sb.append("	<xs:restriction base=\"xs:string\">\n");
sb.append("	    <xs:pattern value=\"[\\s]*[A-Z]([a-zA-Z0-9])*[\\s]*\"/>\n");
sb.append("	</xs:restriction>\n");
sb.append("    </xs:simpleType>\n");
sb.append("\n");
sb.append("\n");
sb.append("</xs:schema>\n");
sb.append("\n");
/*******************************************/

	return sb.toString();
    }

    public static Schema joharXsdSchema()
	    throws  java.io.UnsupportedEncodingException,
		    org.xml.sax.SAXException {
	// Part 1/2: get Source which contains string
	String xsdString = joharXsdString();
	byte[] xsdBytes = xsdString.getBytes("US-ASCII");
	ByteArrayInputStream bais = new ByteArrayInputStream(xsdBytes);
	Source ss = new StreamSource(bais);
	// Part 2/2: get schema factory that can return Schema object
	SchemaFactory sf = SchemaFactory.newInstance(
	    XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema joharSchema = sf.newSchema(ss);

	return joharSchema;
    }

}
