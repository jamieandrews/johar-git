#!/bin/tcsh

cat >JoharXsd.java <<FUNKY_STUFF
/** johar.xsd file, as a Java class.
  * Generated by "makeJoharXsdJava.tcsh" from master source file
  * "../../../resources/johar.xsd".
  * "makeJoharXsdJava.tcsh" should be re-run every time johar.xsd changes.
  */ 

package johar.idf;

import java.io.ByteArrayInputStream;

import javax.xml.XMLConstants;
import javax.xml.transform.Source;
import javax.xml.transform.stream.StreamSource;
import javax.xml.validation.SchemaFactory;
import javax.xml.validation.Schema;

class JoharXsd {
    public static String joharXsdString() {
	StringBuffer sb = new StringBuffer();

/*******************************************/
FUNKY_STUFF

cat >tmp.sed <<FUNKY_STUFF
s/\\\\/\\\\\\\\/g
s/"/\\\\"/g
s/\(.*\)/sb.append("\1\\\\n");/
FUNKY_STUFF

sed -f tmp.sed <../../../resources/johar.xsd >>JoharXsd.java

cat >>JoharXsd.java <<FUNKY_STUFF
/*******************************************/

	return sb.toString();
    }

    public static Schema joharXsdSchema()
	    throws  java.io.UnsupportedEncodingException,
		    org.xml.sax.SAXException {
	// Part 1/2: get Source which contains string
	String xsdString = joharXsdString();
	byte[] xsdBytes = xsdString.getBytes("US-ASCII");
	ByteArrayInputStream bais = new ByteArrayInputStream(xsdBytes);
	Source ss = new StreamSource(bais);
	// Part 2/2: get schema factory that can return Schema object
	SchemaFactory sf = SchemaFactory.newInstance(
	    XMLConstants.W3C_XML_SCHEMA_NS_URI);
	Schema joharSchema = sf.newSchema(ss);

	return joharSchema;
    }

}
FUNKY_STUFF

exit 0
