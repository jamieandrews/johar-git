
package johar.interfaceinterpreter.star;

import java.io.File;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import johar.gem.GemException;
import johar.gem.GemSetting;
import johar.idf.Idf;
import johar.idf.IdfCommand;
import johar.idf.IdfParameter;
import johar.idf.IdfQuestion;
import johar.idf.IdfStage;
import johar.idf.IdfTable;
import johar.utilities.TextInputValidator;

/**
 * The CommandController class interacts with the Widgets; It performs any action 
 * required by the user, while handling all events generated by the Widgets; It 
 * interacts with GemSetting and various classes in the johar.idf package in order to 
 * serve requests raised via the Widgets.
 */
public class CommandController implements CommandControllerBase {
	private GemSetting _gem;
	private Idf _idf;
	private IdfAnalyzer idfAnalyzer;
	private CommandDialog commandDialog;
	private String _commandName;
	private IdfCommand _currentCommand;
	private Map<String, ParameterWidget> paramWidgetsMap;
	private Star _star;
	private int currentStage;
	private int currentStageBuffer;
	public String lastDisplayedText = "";
	private String message = "";
	private boolean _wrapUpIfCancelled;
	private Map<String,List<Integer>> tableMap;
	private QuestionDialog questionDialog;
	private List<ParameterWidget> paramWidgetList;
	private HelpBox helpBox;
	private int helpCurrentState;
	private IdfCommand selectedHelpCommand;
	
	/**
	 * The constructor of the Command Controller class
	 * @param gem
	 * the GemSetting
	 * @param idf
	 * the IDF
	 * @param star
	 * the Star instance
	 */
	public CommandController(GemSetting gem, Idf idf, Star star){
		_gem = gem;
		_idf = idf;
		_star = star;
		idfAnalyzer = new IdfAnalyzer(_idf);  /* Provides access to various information about the specified IDF 
											  * e.g. list of queryable/non-queryable params in a command/stage, list of questions in a command, 
											  * list of tables, list of browsable tables, etc. */ 
		initTableMap();	  //A Map that captures the selected row(s) in each browsable table
	}
	
	public void commandMenuItemClicked(String commandName){
		try {
			lastDisplayedText = "";			//Set the lastDisplayedText to the empty string	
			
			_commandName = commandName;
			currentStage = 0;		//Tracks the current stage
			currentStageBuffer = -1;	//Temporarily stores the value of currentStage for future use			
			idfAnalyzer.setCurrentCommand(_commandName);
			_currentCommand = idfAnalyzer.getCurrentIdfCommand();
			
			/*If any table selection is incomplete for the command, then pop up a dialog box with an
			"OK" button telling the user which tables they have to select rows in in order to issue the command,
			and a description of the bounds of the number of rows to select */
			message = checkTableSelections();
			if (message != null)
				MessageDialog.showWarning(message);
			else{
				//if there is some stage(s) in the command that has a queryable parameter
				if (hasQueryableParams()){
					_gem.selectCurrentCommand(_commandName);				
					
					//Create and display the Command Dialog
					_gem.selectCurrentStage(0);
					commandDialog = new CommandDialog(this, _gem, _idf, idfAnalyzer.getCommand());
					initializeStage();
					while(!idfAnalyzer.hasQueryableParams(currentStage)){
						nextStage();
					}
					commandDialog.revalidate();  //Update the Command Dialog to reflect the current stage
					commandDialog.setVisible(true);
				}
				else{
					//if no stage in the command has a queryable parameter
					_gem.selectCurrentCommand(_commandName);
					_gem.selectCurrentStage(0);
					performStageLoop();				//Perform Stage loop			
					questionAndWrapUp(0, true);		//Perform the Question-and-Wrapup Procedure		
				}
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
							+ e.getMessage() + "]");
		}
	}

	//Stage Loop
	private void performStageLoop() {		
		for (int i = 0; i < _currentCommand.getNumStages(); i++){
			IdfStage stage = _currentCommand.getStage(i);
			_gem.selectCurrentStage(i);
			
			for (int j = 0; j < stage.getNumParameters(); j++){
				IdfParameter param  = stage.getParameter(j);				
				
				//Get default value of parameter
				Object defaultValue = null;
				if (param.getDefaultValueMethod() != null && !param.getDefaultValueMethod().equals("")){
					defaultValue = _gem.callDefaultValueMethod(param.getParameterName());
				}
				else{
					defaultValue = param.getDefaultValue();
				}				
				
				boolean loadValue = false;	//Determine whether to load value into Gem or not
				
				//Check if the parameter has a ParentParameter
				if (param.getParentParameter() == null || param.getParentParameter().equals("")){					
					loadValue = true;
				}
				else{					
					/* Since the parameter has a ParentParameter, verify if the parameter's ParentValue is same as
					   the parent parameter's value */
					IdfParameter parentParam = idfAnalyzer.getIdfParameter(param.getParentParameter());
					String paramParentValue = param.getParentValue();
					String actualParentValue = "";
					
					try {
						for (int t = 0; t < parentParam.getMaxNumberOfReps(); t++){
							actualParentValue = _gem.getParameter(parentParam.getParameterName(), t).toString();
							if (actualParentValue.equals(paramParentValue)){
								loadValue = true;
								break;
							}
						}
					} catch (Exception e) {
						loadValue = false;
					}
				}
				
				//If values should be loaded into Gem for the parameter, then proceed.
				if (loadValue){
					//If parameter is a tableEntry parameter with a browsable source table, then load 
					//selected rows into Gem.
					if (param.getType().equals("tableEntry") && idfAnalyzer.getTable(param.getSourceTable()).getBrowsable()){
						TableWidget table = _star.getStarFrame().getTableWidget(param.getSourceTable());
							
						int[] paramValues = table.getSelectedRows();
						for (int repNum = 0; repNum < paramValues.length; repNum++){
							_gem.setParameterValue(param.getParameterName(), repNum, paramValues[repNum]);
						}
					}
					else {
						//Otherwise load the default value into Gem up to MaxNumberOfReps
						if (defaultValue != null && !defaultValue.equals("")){
							for (int k = 0; k < param.getMaxNumberOfReps(); k++)
								_gem.setParameterValue(param.getParameterName(), k, defaultValue);
						}
					}
				}
			}
			
			//Call ParameterCheckMethod of current stage
			String msg = _gem.parameterCheck();
			if (!(msg == null || msg.equals(""))){
				if (MessageDialog.showWarning(msg)) {     //Show message to user	
					commandWrapUp(true);
					break;
				}
			}
		}
	}

	//Initial the table Map
	private void initTableMap() {
		tableMap = new HashMap<String, List<Integer>>();
		
		for (IdfTable table : idfAnalyzer.getTables()){
			tableMap.put(table.getTableName(), new ArrayList<Integer>());
		}
	}
	
	//Verify if the current command has queryable parameters
	private boolean hasQueryableParams() {
		if (idfAnalyzer.hasQueryableParams())
			return true;
		else
			return false;
	}

	//Initialize Stage Procedure
	private void initializeStage(){
		commandDialog.initializeStageWidget(currentStage);
	}
	
	//Next Stage Procedure
	private void nextStage(){
		
		//Perform a Wrap Up Stage procedure.
		if (stageWrapUp()){
			currentStage++;
			_gem.selectCurrentStage(currentStage);
			initializeStage();		//Perform an Initialize Stage procedure
		}
	}
	
	//Previous Stage Procedure
	private void previousStage(){
		
		//Perform a Wrap Up Stage procedure.
		if (stageWrapUp()){
			currentStage--;
			_gem.selectCurrentStage(currentStage);
			initializeStage();		//Perform an Initialize Stage procedure
		}
	}
	
	//Previous Button Action
	public void previousButtonClicked(){
		try {
			previousStage();	 //Perform a Previous Stage procedure
			
			/*While the current stage has no queryable parameters, 
			  perform a Previous Stage procedure */
			while(!idfAnalyzer.hasQueryableParams(currentStage)){
				previousStage();
			}
			
			//Update the Command Dialog to reflect the current stage
			commandDialog.revalidate();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}		
	}
	
	//Next Button Action
	public void nextButtonClicked(){
		try {
			nextStage();	//Perform a Next Stage procedure

			/*While the current stage has no queryable parameters, 
			  perform a Next Stage procedure */
			while(!idfAnalyzer.hasQueryableParams(currentStage)){
				nextStage();
			}

			//Update the Command Dialog to reflect the current stage
			commandDialog.revalidate();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Captures rows selected by users
	public void tableRowsSelected(String tableName){
		try {
			TableWidget table = _star.getStarFrame().getTableWidget(tableName);
			
			if (tableMap.containsKey(tableName)){
				tableMap.get(tableName).clear();
			}
			
			for (int index : table.getSelectedRows()){
				tableMap.get(tableName).add(index);
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//OK Button Action for Command Dialog Box
	public void commandOKButtonClicked(){		
		try {
			//Check for inactive parameters in current stage
			message = "";
			message = checkParamActive(currentStage);
			if (message.length() > 0){
				if (MessageDialog.showWarning(message)){     //Show message to user
					return;
				}
			}
			
			//Perform the Wrap Up Stage procedure		
			if (!stageWrapUp()){
				return;
			}			
			
			currentStageBuffer = currentStage;
			for (int i = 0; i < idfAnalyzer.numberOfStages(); i++){				
				currentStage = i;
				_gem.selectCurrentStage(i);
				initializeStage();			//Perform the Initialize Stage procedure.
				
				//Check for inactive parameters in stage i
				message = checkParamActive(i);
				if (message.length() > 0){
					if (MessageDialog.showWarning(message)){     //Show message to user
						currentStage = currentStageBuffer;
						return;
					}
				}
				
				//Perform the Wrap Up Stage procedure
				if (!stageWrapUp()){
					currentStage = currentStageBuffer;
					return;
				}
			}			
			currentStage = currentStageBuffer;
			
			questionAndWrapUp(0, false);   //Perform the Question-and-Wrapup Procedure with parameters 0 and false.
			
			_gem.clearParameters();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Check for inactive parameters in the specified stage
	private String checkParamActive(int stageNumber){
		for (IdfParameter parameter : idfAnalyzer.getQueryableParameters(stageNumber)) {
			if (!commandDialog.isParamActive(parameter.getParameterName(), stageNumber)) {
				message += "Parameter \"" + parameter.getLabel()
						+ "\" is not active \n";
			}
		}	
		return message;
	}
	
	//Wrap Up Stage Procedure
	private boolean stageWrapUp() {
		paramWidgetsMap = commandDialog.getStageWidget(currentStage).getParameterWidgets();
		if (paramWidgetsMap == null)
			return false;
		
		//Validate the current values of the current repetitions of the parameters
		message = validateStageParamsValues();
		
		if (!message.equals("")){			
			//If any parameter or parameter repetition does not pass validation, show message to user
			if (MessageDialog.showWarning(message)){
				
				/*If the current stage has no queryable parameters, 
				then perform the CommandWrapup procedure */
				if (!idfAnalyzer.hasQueryableParams(currentStage)){
					commandWrapUp(true);
				}
			}
			return false;
		}
		
		//Load values into Gem
		String paramType = "";
		String param = "";
		
		for (IdfParameter parameter : idfAnalyzer.getParametersInStage(currentStage)){					
			param = parameter.getParameterName();
			paramType = parameter.getType();			
			
			if (paramType.equals("text")){
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(param);
				String paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getValue(i);
					if (paramValue != null && !paramValue.equals("")){
						_gem.setParameterValue(param, i, paramValue);
					}
				}
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(param);
				long paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){					
					if (paramWidget.getValue(i) != null && !paramWidget.getValue(i).equals("")){
						paramValue = Long.parseLong(paramWidget.getValue(i).toString());
						_gem.setParameterValue(param, i, paramValue);
					}						
				}				
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(param);
				double paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){					
					if (paramWidget.getValue(i) != null && !paramWidget.getValue(i).equals("")){
						paramValue = Double.parseDouble(paramWidget.getValue(i).toString());
						_gem.setParameterValue(param, i, paramValue);
					}						
				}				
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(param);
				String paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getSelectedOption(i);
					if (paramValue != null && !paramValue.equals("")){
						if (paramValue.equals("Yes"))
							_gem.setParameterValue(param, i, true);
						else if (paramValue.equals("No"))
							_gem.setParameterValue(param, i, false);
					}
				}		
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(param);
				Object paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getSelectedChoice(i);
					if (paramValue != null && !paramValue.equals("")){
						_gem.setParameterValue(param, i, paramValue.toString());
					}
				}
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(param);
				Date paramValue;
				Calendar paramCalender = Calendar.getInstance();
				Calendar tempCal = Calendar.getInstance();
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getSelectedTime(i);
					tempCal.setTime(paramValue);
					
					paramCalender.set(Calendar.HOUR, tempCal.get(Calendar.HOUR));
					paramCalender.set(Calendar.MINUTE, tempCal.get(Calendar.MINUTE));
					paramCalender.set(Calendar.AM_PM, tempCal.get(Calendar.AM_PM));
					
					if (paramValue != null && !paramValue.equals("")){
						_gem.setParameterValue(param, i, paramCalender);
					}
				}
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(param);
				Date paramValue;
				Calendar paramCalender = Calendar.getInstance();
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = (Date) paramWidget.getSelectedDate(i);
					paramCalender.setTime(paramValue);
					if (paramValue != null && !paramValue.equals("")){
						_gem.setParameterValue(param, i, paramCalender);
					}
				}
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(param);
				String paramValue;
								
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getSelectedFilePath(i);
					if (paramValue != null && !paramValue.equals("")){
						_gem.setParameterValue(param, i, new File(paramValue.toString()));
					}
				}
			}
			else if (paramType.equals("tableEntry") && idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableWidget table = _star.getStarFrame().getTableWidget(parameter.getSourceTable());
					
				int[] paramValues = table.getSelectedRows();
				for (int i = 0; i < paramValues.length; i++){
					_gem.setParameterValue(param, i, paramValues[i]);
				}
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(param);
				int paramValue;
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					paramValue = paramWidget.getSelectedRowIndex(i);
					if (paramValue != -1){
						_gem.setParameterValue(param, i, paramValue);
					}
				}
			}
		}		
		
		// Call the ParameterCheckMethod of the current stage, if it has one.
		String msg = _gem.parameterCheck();
		if (!(msg == null || msg.equals(""))) {
			if (MessageDialog.showWarning(msg)) { // Show message to user

				/*
				 * If the current stage has no queryable parameters, then
				 * perform the CommandWrapup procedure
				 */
				if (!idfAnalyzer.hasQueryableParams(currentStage)) {
					commandWrapUp(true);
				}
			}
			return false;
		} else 
			return true;
	}

	//Validate the current values of the current repetitions of the parameters
	private String validateStageParamsValues(){		
		String paramType = "";
		String paramName = "";
		String validationMsg = "";
		
		for (IdfParameter parameter : idfAnalyzer.getParametersInStage(currentStage)){
			paramType = parameter.getType();
			paramName = parameter.getParameterName();
			
			if (paramType.equals("text")){
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyTextFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);
				}
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyNumberFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);	
				}
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){					
					if (paramWidget.getValue(i) != null && !paramWidget.getValue(i).equals("")){
						long paramValue = Long.parseLong(paramWidget.getValue(i).toString());
						if (!(paramValue >= parameter.getMinIntValue() && paramValue <= parameter.getMaxIntValue()))
							validationMsg += "Your value for " + parameter.getLabel() + " (" + paramValue + ") must be between " + parameter.getMinIntValue() + " and " + parameter.getMaxIntValue() + ".\n";
					}						
				}
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyNumberFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);	
				}
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){					
					if (paramWidget.getValue(i) != null && !paramWidget.getValue(i).equals("")){
						double paramValue = Double.parseDouble(paramWidget.getValue(i).toString());
						if (!(paramValue >= parameter.getMinFloatValue() && paramValue <= parameter.getMaxFloatValue()))
							validationMsg += "Your value for " + parameter.getLabel() + " (" + paramValue + ") must be between " + parameter.getMinFloatValue() + " and " + parameter.getMaxFloatValue() + ".\n";
					}						
				}
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyBooleanFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);	
				}
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyChoiceFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);	
				}
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyTimeFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);
				}
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyDateFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);
				}
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyFileFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);
				}
				
				for (int i = 0; i < paramWidget.getFieldsCount(); i++){
					String paramValue = paramWidget.getSelectedFilePath(i);
					if (paramValue != null && !paramValue.equals("")){
						validationMsg += checkFileConstraint(paramValue, parameter);
					}
				}
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(paramName);
				if (paramWidget.getNonEmptyTableEntryFieldsCount() < parameter.getMinNumberOfReps()){
					validationMsg += getFormattedMessage(parameter);
				}
				
			}
		}
		
		return validationMsg.trim();
	}
	
	//Returns a message in the required format
	private String getFormattedMessage(IdfParameter paramObj) {
		String msg = "";
		
		if (paramObj.getMaxNumberOfReps() > 1){
			if (paramObj.getMinNumberOfReps() == 1)
				msg = "Please specify at least " + paramObj.getMinNumberOfReps() + " value for \"" + paramObj.getLabel() + "\".\n";
			else
				msg = "Please specify at least " + paramObj.getMinNumberOfReps() + " values for \"" + paramObj.getLabel() + "\".\n";
		}
		else{
			msg = "Please specify a value for \"" + paramObj.getLabel() + "\".\n";
		}
		
		return msg;
	}

	//Check for any violation of the FileConstraint attribute for parameters of type "file"
	private String checkFileConstraint(String paramValue, IdfParameter parameter) {
		String filePath = paramValue.trim();
		String constraint = parameter.getFileConstraint();
		File file = new File(filePath);
		String violationMsg = "";
		
		if (constraint.equals("mustExist")){
			if (!file.exists())
				violationMsg += "The file (" + paramValue + ") is not found. Please ensure the file exists.\n";
		}
		else if (constraint.equals("mustBeReadable")){
			if (!file.canRead())
				violationMsg += "The file (" + paramValue + ") is not readable. Please ensure the file exist and that there is \"Read\" permission on the file. You can check the file's security settings for details. \n";
		}
		else if (constraint.equals("mustNotExistYet")){
			if (file.exists())
				violationMsg += "The file (" + paramValue + ") currently exists. The application requires that the file does not exist yet.\n";
		}
		
		return violationMsg;
	}

	//Cancel Button Action for Command Dialog Box
	public void commandCancelButtonClicked(){
		try {
			commandWrapUp(true);
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Add Another Button Action for Parameter Widget
	public void addMoreButtonClicked(String paramName){		
		try {
			IdfParameter parameter = idfAnalyzer.getIdfParameter(paramName);
			String paramType = parameter.getType();
			
			paramWidgetsMap = commandDialog.getStageWidget(currentStage).getParameterWidgets();
			
			if (paramWidgetsMap == null){
				if (MessageDialog.showError("An error occurred while performing requested operation. Please contact the system administrator for assistance.")){
					return;
				}
			}
			
			if (paramType.equals("text")){			
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(paramName);
				int textFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(textFieldCount);
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);
				int numberFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(numberFieldCount);
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);
				int numberFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(numberFieldCount);
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(paramName);
				int booleanFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(booleanFieldCount);
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(paramName);
				int choiceFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(choiceFieldCount);
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(paramName);
				int timeFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(timeFieldCount);
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(paramName);
				int dateFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(dateFieldCount);
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(paramName);
				int fileFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(fileFieldCount);
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(paramName);
				int tableEntryFieldCount = paramWidget.getFieldsCount();
				paramWidget.addNewField(tableEntryFieldCount);
			}
			
			commandDialog.pack();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Move Up Button Action for Parameter Widget
	public void moveUpButtonClicked(String paramName, int repNumber){		
		try {
			IdfParameter parameter = idfAnalyzer.getIdfParameter(paramName);
			String paramType = parameter.getType();
			paramWidgetsMap = commandDialog.getStageWidget(currentStage).getParameterWidgets();
					
			if (paramType.equals("text")){
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveUpFields(repNumber);
			}
			
			commandDialog.pack();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Move Down Button Action for Parameter Widget
	public void moveDownButtonClicked(String paramName, int repNumber){
		try {
			IdfParameter parameter = idfAnalyzer.getIdfParameter(paramName);
			String paramType = parameter.getType();
			paramWidgetsMap = commandDialog.getStageWidget(currentStage).getParameterWidgets();
			
			if (paramType.equals("text")){
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(paramName);				
				paramWidget.moveDownFields(repNumber);
			}
			
			commandDialog.pack();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Delete Button Action for Parameter Widget
	public void deleteButtonClicked(String paramName, int repNumber){		
		try {
			IdfParameter parameter = idfAnalyzer.getIdfParameter(paramName);
			String paramType = parameter.getType();
			paramWidgetsMap = commandDialog.getStageWidget(currentStage).getParameterWidgets();
			
			if (paramType.equals("text")){
				TextWidget paramWidget = (TextWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("int")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("float")){
				NumberWidget paramWidget = (NumberWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("boolean")){
				BooleanWidget paramWidget = (BooleanWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("choice")){
				ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("timeOfDay")){
				TimeWidget paramWidget = (TimeWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("date")){
				DateWidget paramWidget = (DateWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("file")){
				FileWidget paramWidget = (FileWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			else if (paramType.equals("tableEntry") && !idfAnalyzer.getTable(parameter.getSourceTable()).getBrowsable()){
				TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetsMap.get(paramName);				
				paramWidget.deleteField(repNumber);
				
				//Delete repetition from Gem if it exists
				try {
					_gem.deleteParameterRepetition(paramName, repNumber);
				} catch (Exception e) {}
			}
			
			commandDialog.pack();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Question Dialog OK Button Action
	public void questionOKButtonClicked(String questionName) {
		try {
			// Validate the current value of (the response to) the question as
			// if it is a parameter
			paramWidgetList = questionDialog.getQuestionWidget();
			String questionType = "";
			message = "";
			IdfQuestion question;

			if (paramWidgetList.size() > 0) {
				question = idfAnalyzer.getIdfQuestion(questionName);
				questionType = question.getType();
				
				if (questionType.equals("text")) {
					TextWidget paramWidget = (TextWidget) paramWidgetList.get(0);
					String questionValue = paramWidget.getValue(0);
					if (questionValue != null && !questionValue.equals("")) {
						_gem.setParameterValue(questionName, 0, questionValue);
					} else 
						message += "Please enter the required information in the box.";					
				} 
				else if (questionType.equals("int")) {
					NumberWidget paramWidget = (NumberWidget) paramWidgetList.get(0);
					Object questionValue;
					long inputValue;

					questionValue = paramWidget.getValue(0);
					if (questionValue != null && !questionValue.equals("")) {
						inputValue = Long.parseLong(questionValue.toString());
						if (inputValue >= question.getMinIntValue()
								&& inputValue <= question.getMaxIntValue()) {
							_gem.setParameterValue(questionName, 0, inputValue);
						} else
							message += "Your value (" + inputValue
									+ ") must be between "
									+ question.getMinIntValue() + " and "
									+ question.getMaxIntValue() + ".";
					} else 
						message += "Please specify a numeric value.";					
				} 
				else if (questionType.equals("float")) {
					NumberWidget paramWidget = (NumberWidget) paramWidgetList.get(0);
					Object questionValue;
					double inputValue;

					questionValue = paramWidget.getValue(0);
					if (questionValue != null && !questionValue.equals("")) {
						inputValue = Double.parseDouble(questionValue.toString());
						if (inputValue >= question.getMinFloatValue()
								&& inputValue <= question.getMaxFloatValue()) {
							_gem.setParameterValue(questionName, 0, inputValue);
						} else
							message += "Your value (" + inputValue
									+ ") must be between "
									+ question.getMinFloatValue() + " and "
									+ question.getMaxFloatValue() + ".";
					} else 
						message += "Please specify a numeric value.";					
				} 
				else if (questionType.equals("boolean")) {
					BooleanWidget paramWidget = (BooleanWidget) paramWidgetList.get(0);
					String questionValue;

					questionValue = paramWidget.getSelectedOption(0);
					if (questionValue != null && !questionValue.equals("")) {
						if (questionValue.equals("Yes"))
							_gem.setParameterValue(questionName, 0, true);
						else if (questionValue.equals("No"))
							_gem.setParameterValue(questionName, 0, false);
					} else 
						message += "Please select an option.";					
				} 
				else if (questionType.equals("choice")) {
					ChoiceWidget paramWidget = (ChoiceWidget) paramWidgetList.get(0);
					Object questionValue;

					questionValue = paramWidget.getSelectedChoice(0);
					if (questionValue != null && !questionValue.equals("")) {
						_gem.setParameterValue(questionName, 0,
								questionValue.toString());
					} else 
						message += "Please select an option.";					
				} 
				else if (questionType.equals("timeOfDay")) {
					TimeWidget paramWidget = (TimeWidget) paramWidgetList.get(0);
					Date questionValue;
					Calendar questCalender = Calendar.getInstance();
					Calendar tempCal = Calendar.getInstance();

					questionValue = paramWidget.getSelectedTime(0);
					if (questionValue != null && !questionValue.equals("")) {
						tempCal.setTime(questionValue);
						
						questCalender.set(Calendar.HOUR, tempCal.get(Calendar.HOUR));
						questCalender.set(Calendar.MINUTE, tempCal.get(Calendar.MINUTE));
						questCalender.set(Calendar.AM_PM, tempCal.get(Calendar.AM_PM));
						
						_gem.setParameterValue(questionName, 0, questCalender);
					} else 
						message += "Please specify a time.";					
				} 
				else if (questionType.equals("date")) {
					DateWidget paramWidget = (DateWidget) paramWidgetList.get(0);
					Date questionValue;
					Calendar questCalender = Calendar.getInstance();
					
					questionValue = (Date) paramWidget.getSelectedDate(0);
					if (questionValue != null && !questionValue.equals("")) {
						questCalender.setTime(questionValue);
						_gem.setParameterValue(questionName, 0, questCalender);
					} else 
						message += "Please select a date.";					
				} 
				else if (questionType.equals("file")) {
					FileWidget paramWidget = (FileWidget) paramWidgetList.get(0);
					String questionValue;

					questionValue = paramWidget.getSelectedFilePath(0);
					if (questionValue != null && !questionValue.equals("")) {
						String msg = checkFileConstraint(questionValue, question);
						if (msg.equals(""))
							_gem.setParameterValue(questionName, 0, new File(questionValue.toString()));
						else
							message += msg;
					} else 
						message += "Please select a file.";					
				} 
				else if (questionType.equals("tableEntry")
						&& !idfAnalyzer.getTable(question.getSourceTable()).getBrowsable()) {
					TableEntryWidget paramWidget = (TableEntryWidget) paramWidgetList.get(0);
					Object questionValue;

					questionValue = paramWidget.getSelectedRowIndex(0);
					if (questionValue != null && !questionValue.equals("")) {
						_gem.setParameterValue(questionName, 0, questionValue);
					} else 
						message += "Please select an option.";					
				}
			}

			if (message.length() > 0){
				if (MessageDialog.showWarning(message)){}
			}
			else{
				// Dispose the question dialog box.
				questionDialog.setVisible(false);
				questionDialog.dispose();

				// Execute the Question-and-Wrapup Procedure (recursively)
				questionAndWrapUp(idfAnalyzer.getQuestionNumber(questionName) + 1,
						_wrapUpIfCancelled);
			}			
			
		} catch (Exception ex) {
			ex.printStackTrace();
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
							+ ex.getMessage() + "]");
		}
	}

	//Question Dialog Cancel Button Action
	public void questionCancelButtonClicked(String questionName){		
		try {
			//Dispose the question dialog box.
			questionDialog.setVisible(false);
			questionDialog.dispose();

			//If wrapUpIfCancelled is true, then execute the Command Wrapup Procedure
			if (_wrapUpIfCancelled){
				commandWrapUp(true);
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}	
	
	//Verify if table selection is complete
	private String checkTableSelections() {
		StringBuilder msgBuffer = new StringBuilder("Please perform the following action(s) before you continue:");
		int initMsgCount = msgBuffer.toString().length();
		String srcTable = "";
		long minReps;
		long maxReps;
		for (IdfParameter param : idfAnalyzer.getParametersInCommand(false)){
			if (param.getType().equals("tableEntry")){
				srcTable = param.getSourceTable();
				if (idfAnalyzer.getTable(srcTable).getBrowsable()){
					if (param.getParentParameter().equals("")){
						if (param.getMinNumberOfReps() > tableMap.get(srcTable).size()){
							minReps = param.getMinNumberOfReps();
							maxReps = param.getMaxNumberOfReps();
							if (minReps == maxReps){
								msgBuffer.append("\n");
								if (minReps == 1)
									msgBuffer.append("-- Select at least " + minReps + " row from the " + TextInputValidator.titleCaseTranslation(srcTable) + " table");
								else
									msgBuffer.append("-- Select at least " + minReps + " rows from the " + TextInputValidator.titleCaseTranslation(srcTable) + " table");
								}
							else if (minReps < maxReps){
								msgBuffer.append("\n");
								msgBuffer.append("-- Select between " + minReps + " and " + maxReps + " rows from the " + TextInputValidator.titleCaseTranslation(srcTable) + " table");
							}
						}
					}
				}
			}
		}
		
		if (msgBuffer.toString().length() > initMsgCount)
			return msgBuffer.toString();
		else
			return null;
	}

	//The Question-and-Wrapup Procedure
	private void questionAndWrapUp(int questionNumber, boolean wrapUpIfCancelled){
		_wrapUpIfCancelled = wrapUpIfCancelled;
		
		//Everything is OK for the command to be actually executed.
		if (questionNumber >= idfAnalyzer.getQuestionsInCommand().size()){
			try {
				_gem.callCommandMethod();
			} catch (GemException e) {
				MessageDialog.showError("An error occurred while performing the requested operation. [Error Details from App Engine: "
						+ e.getMessage() + "]");
				commandWrapUp(true);
				return;
			}
			
			commandWrapUp(false);
			return;
		}
		else{  //Otherwise,
			//Call the AskIfMethod for the question.
			IdfQuestion questionObj = idfAnalyzer.getIdfQuestion(questionNumber);
			String questionName = questionObj.getParameterName();
			boolean result = _gem.questionShouldBeAsked(questionName);
			if (!result){
				
				//Execute the Question-and-Wrapup Procedure (recursively)
				questionAndWrapUp(questionNumber + 1, wrapUpIfCancelled);
				return;
			}
			else{	//Otherwise,
				//Get Default Value
				String defaultValueMethod = questionObj.getDefaultValueMethod();
				Object defaultValue = questionObj.getDefaultValue();
				
				if (defaultValueMethod != null && !defaultValueMethod.equals("")){
					defaultValue = _gem.callDefaultValueMethod(questionName);
				}
				
				//Create and display Question Dialog Box
				questionDialog = new QuestionDialog(defaultValue, this, _idf, questionObj);
				questionDialog.showDialog();
			}
		}
	}

	//CommandWrapup Procedure
	private void commandWrapUp(boolean commandWasCancelled) {
		
		//Dispose Command Dialog if any
		if (commandDialog != null){
			commandDialog.setVisible(false);
			commandDialog.dispose();
		}
		
		if (!commandWasCancelled){
			
			//Determine whether the application should quit
			boolean quitAfter = _gem.quitAfterCurrentCommand();
			if (quitAfter){
				
				/*Check if lastDisplayedText is non-null and not the empty string. If true, then create a dialog box
				containing lastDisplayedText and an "OK" button, and display it. */
				if (lastDisplayedText != null && !lastDisplayedText.equals("")){
					if (MessageDialog.show(lastDisplayedText, "Last Displayed Information")){
						System.exit(0);
					}
				}
				else
					System.exit(0);		//Exit the application
			}
			else{
				//Append Horizontal Line		
				if (!_star.getStarFrame().horizontalLineIsLastText())
					_star.getStarFrame().appendHorizontalLineToTextArea();
				
				//Refresh tables
				List<IdfTable> tableList = idfAnalyzer.getBrowsableTables();
				String tableName;
				
				for (IdfTable table : tableList){
					tableName = table.getTableName();
					_star.getStarFrame().updateTableArea(tableName, _gem.tableIsShown(tableName));
					tableMap.get(tableName).clear();
				}
			}		
		}
		
		/* Call the ActiveIfMethod of every command, and make each menu item of each menu active or
		inactive (greyed out) according to the result of the ActiveIfMethod of the command */
		List<IdfCommand> commandList = idfAnalyzer.getAllCommands();
		if (commandList.size() > 0){
			for (IdfCommand command : commandList){
				boolean isCmdActive = _gem.methodIsActive(command.getCommandName());
				_star.getStarFrame().setMenuItemEnabled(command.getCommandName(), isCmdActive);
			}
		}
	}
	
	//Table row selection procedure for the Help Box
	public void tableRowClicked(int helpState) {
		try {
			helpCurrentState = helpState + 1;		
			int selectedRow = -1;
			String commandLabel = "";		
			String paramLabel = "";
			IdfParameter selectedParam;
			
			if (helpState == 0){
				selectedRow = helpBox.getTopLevelTableSelectedRow();
				if (selectedRow != -1){
					commandLabel = helpBox.getTopLevelTable().getModel().getValueAt(selectedRow, 0).toString();
					selectedHelpCommand = idfAnalyzer.getIdfCommandByLabel(commandLabel);
					
					helpBox.showCommandState(selectedHelpCommand);
				}
			}
			else if (helpState == 1){
				selectedRow = helpBox.getParamsTableSelectedRow();
				if (selectedRow != -1){
					paramLabel = helpBox.getParamsTable().getModel().getValueAt(selectedRow, 0).toString();
					selectedParam = idfAnalyzer.getIdfParameterByLabel(selectedHelpCommand, paramLabel);
					
					helpBox.showParameterState(selectedHelpCommand, selectedParam, false);
				}
			}
			else if (helpState == 2){
				selectedRow = helpBox.getQuestionsTableSelectedRow();
				
				if (selectedRow != -1){
					paramLabel = helpBox.getQuestionsTable().getModel().getValueAt(selectedRow, 0).toString();
					selectedParam = idfAnalyzer.getIdfQuestionByLabel(selectedHelpCommand, paramLabel);
					
					helpBox.showParameterState(selectedHelpCommand, selectedParam, true);
				}
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}

	//User clicks a menu item under the Star menu
	public void commandMenuItemClickedStar(String commandName) {
		try {
			if (commandName.equals("help")){
				helpBox = new HelpBox(_idf, this);			
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}

	//User clicks the Back button on the Help Box
	public void helpBackButtonClicked() {
		try {
			if (helpCurrentState == 1){
				helpCurrentState = 0;
				helpBox.showTopLevelState();
			}			
			else if (helpCurrentState == 2){
				helpCurrentState = 1;
				helpBox.showCommandState(selectedHelpCommand);
			}
			else if (helpCurrentState == 3){
				helpCurrentState = 1;
				helpBox.showCommandState(selectedHelpCommand);
			}
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}

	//User clicks the OK button on the Help Box
	public void helpOKButtonClicked() {
		try {
			helpBox.dispose();
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
					+ e.getMessage() + "]");
		}
	}
	
	//Retrieves table data
	public List<String> getTableData(String tableName){
		try {
			boolean rowFilled = true;
			List<String> dataSet = new ArrayList<String>();
			String rowText;
			int rowNum = 0;
			
			while (rowFilled){
				if (_gem.rowIsFilled(tableName, rowNum)){
					rowText = _gem.getRowText(tableName, rowNum);			
					dataSet.add(rowText);
					rowNum++;
				}
				else{
					rowFilled = false;
				}			
			}
			return dataSet;
		} catch (Exception e) {
			MessageDialog.showError("An error occurred while performing the requested operation. [Error Details: "
				+ e.getMessage() + "]");
			return null;
		}
	}
}
